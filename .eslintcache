[{"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\index.js":"1","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\App.js":"2","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\reportWebVitals.js":"3","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Autocomplete.js":"4","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Cities.js":"5","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\weathersymbols.js":"6"},{"size":500,"mtime":1607353938448,"results":"7","hashOfConfig":"8"},{"size":2717,"mtime":1607353945848,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":5159,"mtime":1607412854606,"results":"11","hashOfConfig":"8"},{"size":129332,"mtime":1607085894725,"results":"12","hashOfConfig":"8"},{"size":518,"mtime":1607411607838,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"p465fd",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\index.js",[],["28","29"],"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\App.js",["30","31","32","33"],"import logo from './logo.svg';\nimport './App.css';\nimport {cities} from './Cities.js';\nimport React,  {Component} from 'react'\nimport {useState} from 'react'\nimport Autocomplete from './Autocomplete';\n\n  /* exlude getting geocaches\n  const componentDidMount = () => { \n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then(res => {\n      console.log(res)\n    return res.json()})\n    .then(data => setUsers(data))\n\n    console.log(users)\n\n    const [geoPoints, setGeoPoints] = useState()\n  const getGeoPoints = () => {\n    fetch(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities/Q26040\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"ec3117aec2mshee7aab20964ef78p1d89ebjsn5145d6c3660e\",\n        \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\"\n      }\n    })\n    .then(response => {\n  \n      return  response.json()\n    })\n    .then(data => setGeoPoints(data.data)\n     \n    \n  )\n    .catch(err => {\n      \n      console.error(err);\n    });\n    \n  }\n      let x\n    getGeoPoints()\n    while(geoPoints===null)\n      if(geoPoints!=null)\n        x = geoPoints.longitude.toString().substring(0,6)\n    \n      if(geoPoints!=null)\n        x = geoPoints.longitude.toString().substring(0,6)\n      console.log(x)\n  }\n  \n  <div><button onClick={getGeoPoints}>getGeoPoints</button></div>\n     {geoPoints!=null && <div>{geoPoints.longitude} {geoPoints.latitude}</div>}\n     {geoPoints!=null && <div>\n     <input type=\"text\" onChange={getWeather} value={geoPoints.longitude.toString().substring(0,6)}></input>\n     <input type=\"text\" onChange={getWeather} value={geoPoints.latitude.toString().substring(0,6)}></input>\n     </div>\n     }\n     {geoPoints!=null && <div><button onClick={getWeather}>Get Temperature in Sthlm</button></div>}\n     \n     <div>\n     {weather!=null && weather.timeSeries[0].parameters.find(x => x.name === \"t\").values}\n       </div>\n       \n  \n  */\n\n  \n//sthlmQ1754\n\nconst weatherApplication = (props) => {\n\n  /*const [weather, setWeather] = useState()\n  const getWeather = () => {\n\n\n   \n\n        fetch(`https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/${geoPoints.longitude.toString().substring(0,6)}/lat/${geoPoints.latitude.toString().substring(0,6)}/data.json`)\n          .then(res => {\n     \n            return res.json()})\n  \n  \n            .then(data => setWeather(data))\n\n            }\n*/\n  \n  \n  return (\n    <div></div>\n    )\n}\n\n\n\n\nfunction App() {\n  \n  \n \n\n    \n\n\n\n\n  \n  return (\n    <React.Fragment>\n<h1>Weather App</h1>\n<div className=\"pjcontainer\">\n<div className=\"root\">\n      <Autocomplete\n        options={cities.map(x=>x.city)}\n      />\n    </div>\n    </div>\n    \n\n     </React.Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\reportWebVitals.js",[],"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Autocomplete.js",[],"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Cities.js",[],"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\weathersymbols.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"42","line":4,"column":17,"nodeType":"40","messageId":"41","endLine":4,"endColumn":26},{"ruleId":"38","severity":1,"message":"43","line":5,"column":9,"nodeType":"40","messageId":"41","endLine":5,"endColumn":17},{"ruleId":"38","severity":1,"message":"44","line":71,"column":7,"nodeType":"40","messageId":"41","endLine":71,"endColumn":25},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'useState' is defined but never used.","'weatherApplication' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]