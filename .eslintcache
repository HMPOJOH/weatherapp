[{"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\index.js":"1","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\App.js":"2","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\reportWebVitals.js":"3","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Autocomplete.js":"4","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Cities.js":"5","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\weathersymbols.js":"6"},{"size":500,"mtime":1607353938448,"results":"7","hashOfConfig":"8"},{"size":2717,"mtime":1607353945848,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":5528,"mtime":1607420179076,"results":"11","hashOfConfig":"8"},{"size":129332,"mtime":1607085894725,"results":"12","hashOfConfig":"8"},{"size":518,"mtime":1607411607838,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"p465fd",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\index.js",[],["29","30"],"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\App.js",["31","32","33","34"],"import logo from './logo.svg';\nimport './App.css';\nimport {cities} from './Cities.js';\nimport React,  {Component} from 'react'\nimport {useState} from 'react'\nimport Autocomplete from './Autocomplete';\n\n  /* exlude getting geocaches\n  const componentDidMount = () => { \n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then(res => {\n      console.log(res)\n    return res.json()})\n    .then(data => setUsers(data))\n\n    console.log(users)\n\n    const [geoPoints, setGeoPoints] = useState()\n  const getGeoPoints = () => {\n    fetch(\"https://wft-geo-db.p.rapidapi.com/v1/geo/cities/Q26040\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"ec3117aec2mshee7aab20964ef78p1d89ebjsn5145d6c3660e\",\n        \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\"\n      }\n    })\n    .then(response => {\n  \n      return  response.json()\n    })\n    .then(data => setGeoPoints(data.data)\n     \n    \n  )\n    .catch(err => {\n      \n      console.error(err);\n    });\n    \n  }\n      let x\n    getGeoPoints()\n    while(geoPoints===null)\n      if(geoPoints!=null)\n        x = geoPoints.longitude.toString().substring(0,6)\n    \n      if(geoPoints!=null)\n        x = geoPoints.longitude.toString().substring(0,6)\n      console.log(x)\n  }\n  \n  <div><button onClick={getGeoPoints}>getGeoPoints</button></div>\n     {geoPoints!=null && <div>{geoPoints.longitude} {geoPoints.latitude}</div>}\n     {geoPoints!=null && <div>\n     <input type=\"text\" onChange={getWeather} value={geoPoints.longitude.toString().substring(0,6)}></input>\n     <input type=\"text\" onChange={getWeather} value={geoPoints.latitude.toString().substring(0,6)}></input>\n     </div>\n     }\n     {geoPoints!=null && <div><button onClick={getWeather}>Get Temperature in Sthlm</button></div>}\n     \n     <div>\n     {weather!=null && weather.timeSeries[0].parameters.find(x => x.name === \"t\").values}\n       </div>\n       \n  \n  */\n\n  \n//sthlmQ1754\n\nconst weatherApplication = (props) => {\n\n  /*const [weather, setWeather] = useState()\n  const getWeather = () => {\n\n\n   \n\n        fetch(`https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/${geoPoints.longitude.toString().substring(0,6)}/lat/${geoPoints.latitude.toString().substring(0,6)}/data.json`)\n          .then(res => {\n     \n            return res.json()})\n  \n  \n            .then(data => setWeather(data))\n\n            }\n*/\n  \n  \n  return (\n    <div></div>\n    )\n}\n\n\n\n\nfunction App() {\n  \n  \n \n\n    \n\n\n\n\n  \n  return (\n    <React.Fragment>\n<h1>Weather App</h1>\n<div className=\"pjcontainer\">\n<div className=\"root\">\n      <Autocomplete\n        options={cities.map(x=>x.city)}\n      />\n    </div>\n    </div>\n    \n\n     </React.Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\reportWebVitals.js",[],"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Autocomplete.js",["35"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {cities} from './Cities.js';\r\nimport {weathersymbols} from './weathersymbols';\r\nimport moment from \"moment\";\r\nimport {useState} from 'react'\r\n\r\nconst GetCityItem =(props) =>{\r\n    const [weather, setWeather] = useState()\r\n       \r\n\r\n    const WeatherApplication = (event) => {\r\n\r\n      //  console.log(cities.find(x => x.city ===event.target.value.toString()).Longitude)\r\n       // console.log(cities.find(x => x.city ===event.target.value.toString()).Latitude)\r\n        \r\n      \r\n\r\n        let long = cities.find(x => x.city ===event.target.value.toString()).Longitude.substring(0,6)\r\n        let lat = cities.find(x => x.city ===event.target.value.toString()).Latitude.substring(0,6)\r\n        \r\n      \r\n      \r\n      \r\n         \r\n      \r\n              fetch(`https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/${long}/lat/${lat}/data.json`)\r\n                .then(res => {\r\n           \r\n                  return res.json()})\r\n        \r\n        \r\n                  .then(data => setWeather(data))\r\n      \r\n                  }\r\n      \r\n        console.log(weather)\r\n/*\r\n <table>\r\n        {weather.timeSeries!=null && weather.timeSeries.map(x => <tr><td>{x.parameters.find(x => x.name === \"t\").values}</td></tr> )}\r\n        </table>\r\n           {weather!=null &&  'Current temp: ' + weather.timeSeries[0].parameters.find(x => x.name === \"t\").values}\r\n            <input type=\"submit\" style={{color:'transparent'}} value=\"\" className=\"search-btn\" onClick={WeatherApplication} value={props.userinput}/>\r\n       \r\n*/\r\n\r\nlet prevDay = \"Today\"\r\n\r\nconst PrintDay = (day,time) => {\r\n  if ((time ===\"01\" || time ===\"00\") && day!=prevDay){\r\n    prevDay=day\r\n    return true\r\n  }\r\n  \r\n  else \r\n  return false\r\n}\r\n\r\n    return(\r\n        <React.Fragment>\r\n               <button class=\"btn btn-dark buttonsearch\" onClick={WeatherApplication} value={props.userinput}>Search</button>\r\n       \r\n       <br/>\r\n       <div className=\"outputTemp form-control\" style={{backgroundColor:'white'}}> \r\n        {weather!=null && <p className=\"weekday\">Today</p>}\r\n       {weather!=null &&   weather.timeSeries.map(x=> <React.Fragment><span>{ PrintDay(moment(x.validTime).format(\"dddd\"),moment(x.validTime).format(\"HH\")) && <p className=\"weekday\">  {moment(x.validTime).format(\"dddd\")} </p>  } ({moment(x.validTime).format(\"HH\")}) {x.parameters.map(y => y.name===\"t\" && y.values +\"Â°C \")} \r\n    {x.parameters.map(y => y.name===\"Wsymb2\" && weathersymbols[y.values])}</span><br/></React.Fragment>)}\r\n    \r\n       </div>\r\n       </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport class Autocomplete extends Component {\r\n  static propTypes = {\r\n    options: PropTypes.instanceOf(Array).isRequired\r\n  };\r\n  state = {\r\n    activeOption: 0,\r\n    filteredOptions: [],\r\n    showOptions: false,\r\n    userInput: ''\r\n  };\r\n\r\n  onChange = (e) => {\r\n    console.log('onChanges');\r\n\r\n    const { options } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    const filteredOptions = options.filter(\r\n      (optionName) =>\r\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions,\r\n      showOptions: true,\r\n      userInput: e.currentTarget.value\r\n    });\r\n  };\r\n\r\n  onClick = (e) => {\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions: [],\r\n      showOptions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n  };\r\n  onKeyDown = (e) => {\r\n    const { activeOption, filteredOptions } = this.state;\r\n\r\n    if (e.keyCode === 13) {\r\n      this.setState({\r\n        activeOption: 0,\r\n        showOptions: false,\r\n        userInput: filteredOptions[activeOption]\r\n      });\r\n    } else if (e.keyCode === 38) {\r\n      if (activeOption === 0) {\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption - 1 });\r\n    } else if (e.keyCode === 40) {\r\n      if (activeOption === filteredOptions.length - 1) {\r\n        console.log(activeOption);\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n\r\n      state: { activeOption, filteredOptions, showOptions, userInput }\r\n    } = this;\r\n    let optionList;\r\n    if (showOptions && userInput) {\r\n      if (filteredOptions.length) {\r\n        optionList = (\r\n          <ul className=\"options\">\r\n            {filteredOptions.map((optionName, index) => {\r\n              let className;\r\n              if (index === activeOption) {\r\n                className = 'option-active';\r\n              }\r\n              return (\r\n                <li className={className} key={optionName} onClick={onClick}>\r\n                  {optionName}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        optionList = (\r\n          <div className=\"no-options\">\r\n            <em>No Option!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-box form-control\"\r\n            onChange={onChange}\r\n            onKeyDown={onKeyDown}\r\n            value={userInput}\r\n          />\r\n          \r\n          <GetCityItem userinput={userInput}/>\r\n          </div>\r\n        {optionList}\r\n        \r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n","C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\Cities.js",[],"C:\\Users\\POJOH\\RestAPIapp\\restapi01\\src\\weathersymbols.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":8,"nodeType":"42","messageId":"43","endLine":1,"endColumn":12},{"ruleId":"40","severity":1,"message":"44","line":4,"column":17,"nodeType":"42","messageId":"43","endLine":4,"endColumn":26},{"ruleId":"40","severity":1,"message":"45","line":5,"column":9,"nodeType":"42","messageId":"43","endLine":5,"endColumn":17},{"ruleId":"40","severity":1,"message":"46","line":71,"column":7,"nodeType":"42","messageId":"43","endLine":71,"endColumn":25},{"ruleId":"47","severity":1,"message":"48","line":50,"column":44,"nodeType":"49","messageId":"50","endLine":50,"endColumn":46},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'useState' is defined but never used.","'weatherApplication' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]